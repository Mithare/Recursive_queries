/* Difference in Recursive Query syntax for PostgreSQL. */

-- Queries:
-- Q1: Display number from 1 to 10 without using any in built functions.
-- Q2: Find the hierarchy of employees under a given manager "Asha".
-- Q3: Find the hierarchy of managers for a given employee "David".


DROP TABLE emp_details;
CREATE TABLE emp_details
    (
        id           int PRIMARY KEY,
        name         varchar(100),
        manager_id   int,
        salary       int,
        designation  varchar(100)

    );

INSERT INTO emp_details VALUES (1,  'Shripadh', NULL, 10000, 'CEO');
INSERT INTO emp_details VALUES (2,  'Satya', 5, 1400, 'Software Engineer');
INSERT INTO emp_details VALUES (3,  'Jia', 5, 500, 'Data Analyst');
INSERT INTO emp_details VALUES (4,  'David', 5, 1800, 'Data Scientist');
INSERT INTO emp_details VALUES (5,  'Michael', 7, 3000, 'Manager');
INSERT INTO emp_details VALUES (6,  'Arvind', 7, 2400, 'Architect');
INSERT INTO emp_details VALUES (7,  'Asha', 1, 4200, 'CTO');
INSERT INTO emp_details VALUES (8,  'Maryam', 1, 3500, 'Manager');
INSERT INTO emp_details VALUES (9,  'Reshma', 8, 2000, 'Business Analyst');
INSERT INTO emp_details VALUES (10, 'Akshay', 8, 2500, 'Java Developer');


select * from emp_details


/* Q1: Display number from 1 to 10 without using any in built functions. */
with recursive numbers as
(select 1 as n
 union 
 select n + 1 from numbers 
 where n < 10 
)
select * from numbers


/* Q2: Find the hierarchy of employees under a given manager */
with recursive employee as
(select id, name, manager_id, designation, 1 as lvl
 from emp_details where name = 'Asha'
 union
 select ed.id, ed.name, ed.manager_id, ed.designation, e.lvl+1 as lvl
 from employee as e
 join emp_details as ed on e.id = ed.manager_id
)
select * from employee

/* Q2-A: Find the hierarchy of employees under a given employee. Also displaying the manager name. */
with recursive managers as
	(select id as emp_id, name as emp_name, manager_id, designation as emp_role, 1 as level
	 from emp_details e where id=7
	 union
	 select e.id as emp_id, e.name as emp_name, e.manager_id, e.designation as emp_role, level+1 as level
	 from emp_details e
	 join managers m on m.emp_id = e.manager_id)
select m.emp_id, m.emp_name, m.manager_id, e.name as manager_name, m.emp_role, m.level
from managers m
join emp_details e on e.id=m.manager_id;


/* Q3: Find the hierarchy of managers for a given employee */
with recursive managers as
	(select id as emp_id, name as emp_name, manager_id, designation as emp_role, 1 as level
	 from emp_details e where id=5
	 union
	 select e.id as emp_id, e.name as emp_name, e.manager_id, e.designation as emp_role, level+1 as level
	 from emp_details e
	 join managers m on m.manager_id = e.id)
select *
from managers;


--CREATE TABLE

create table family_members (
person_id varchar,
relative_1 varchar,
relative_2 varchar
)

select * from family_members

copy family_members from 'C:\Program Files\PostgreSQL\15\pgAdmin 4\Family members.csv' CSV header


--Query to find all the family members heirarchy from a given table.

with recursive related_fam_members as
(
	select *
	from base_query
	union 
	select f.person_id, r.relatives, r.fam_group
	from related_fam_members as r
	join family_members as f
	on r.relatives=f.relative_1 or r.relatives=f.relative_2
),
base_query as 
(
	select person_id, relative_1 as relatives, substring(person_id,1,3) as fam_group
	from family_members
	where relative_1 is not null
	union
	select person_id, relative_2 as relatives, substring(person_id,1,3) as fam_group
	from family_members
	where relative_2 is not null
	order by 1
),
no_relatives as
(
	select person_id
	from family_members
	where relative_1 is null and relative_2 is null
	and person_id not in (select relatives from base_query)
)

select concat('F_', row_number() over(order by relatives)) as family_id, relatives
from (
select distinct string_agg(relatives, ', ' order by relatives) as relatives
from related_fam_members
group by fam_group
union
select *
from no_relatives
order by 1
) as x
